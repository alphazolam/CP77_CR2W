//------------------------------------------------
//--- 010 Editor v9.0.2 Script File
//
//      File: CP77_CR2W_Paste.1sc
//   Authors: alphaZomega
//   Version: 0.33
//   Purpose: Paste copied properties into other classes of the same CR2WFile
//  Category: CP77_CR2W
//   History: December 8, 2022
//------------------------------------------------
//Option:                                                           Effect:
local uint Run_Template_After_Completion = FALSE;                   //Run the template after completing the script


string s, output; 
uint i, f, a;
uint cpos = GetCursorPos();
uint addedSize = 0;
if (GetSelSize() > 0)
    cpos = GetSelStart();

void fixProp(PROPERTY& prop) {
    if (exists(prop.Type.size) && prop.Type.size > 4)
        prop.Type.size += addedSize;
    if (exists(parentof(prop))) 
        fixProp(parentof(prop));
}

int findProp(PROPERTY& prop) {
    uint k = 0;
    while (exists(prop.More[k])) {
        if (startof(CR2WFile[CR2WIdx]) + startof(prop.More[k]) < cpos && startof(CR2WFile[CR2WIdx]) + startof(prop.More[k]) + sizeof(prop.More[k]) > cpos) {
            if (findProp(prop.More[k]) == 1) {
                return true;
            }
        }
        k++;
    }
    if (startof(CR2WFile[CR2WIdx]) + startof(prop) < cpos && startof(CR2WFile[CR2WIdx]) + startof(prop) + sizeof(prop) > cpos) {
        if (exists(prop.Count))
            prop.Count += 1;
        fixProp(prop);
        return true;
    }
    return false;
}

void InsertNewCName() {
    
    uint nameIdx = CR2WFile[CR2WIdx].CR2WTable[1].itemCount; 
    uint writeOffset = startof(CR2WFile[CR2WIdx].NAMES.Name[CR2WFile[CR2WIdx].CR2WTable[1].itemCount-1].name) 
        + sizeof(CR2WFile[CR2WIdx].NAMES.Name[CR2WFile[CR2WIdx].CR2WTable[1].itemCount-1].name);
    CR2WFile[CR2WIdx].CR2WTable[1].offset += sizeof(newCName);
    CR2WFile[CR2WIdx].CR2WTable[1].itemCount++;
    if (CR2WFile[CR2WIdx].CR2WTable[2].offset) {
        for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[2].itemCount; i++) {
            CR2WFile[CR2WIdx].CR2WImport.CR2WImport[i].depotPath += sizeof(newCName);
        }
        CR2WFile[CR2WIdx].CR2WTable[2].offset += addedSize;
    }
    CR2WFile[CR2WIdx].CR2WTable[0].itemCount += sizeof(newCName);
    CR2WFile[CR2WIdx].CR2WTable[3].offset += addedSize;
    CR2WFile[CR2WIdx].CR2WTable[4].offset += addedSize;
    for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[4].itemCount; i++) 
        CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataOffset += addedSize;
    if (CR2WFile[CR2WIdx].CR2WTable[5].offset) {
        CR2WFile[CR2WIdx].CR2WTable[5].offset += addedSize;
        for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[5].itemCount; i++)
            CR2WFile[CR2WIdx].CR2WBuffer[i].offset += addedSize;
    }
    CNAME myName = newCName;
    CR2WFile[CR2WIdx].HEADER.fileSize += addedSize;
    CR2WFile[CR2WIdx].HEADER.bufferSize += addedSize;
    FSeek(startof(CR2WFile[CR2WIdx].NAMES) + sizeof(CR2WFile[CR2WIdx].NAMES));
    InsertBytes(FTell(), 8, 0);
    WriteUInt(FTell(), writeOffset - startof(CR2WFile[CR2WIdx].STRINGS));
    WriteUInt(FTell()+4, GenerateHash(myName));
    InsertBytes(writeOffset, sizeof(newCName), 0);
    WriteString(writeOffset, newCName);
    SPrintf(s, "Inserted new Enum at position %u\n", FTell()); output += s;
    SPrintf(s, "Inserted new CName string at position %u\n", writeOffset); output += s;
}

void InsertNewCR2WImport() {
    uint nameIdx = CR2WFile[CR2WIdx].CR2WTable[1].itemCount; 
    
    if (exists(CR2WFile[CR2WIdx].CR2WImport)) {
        uint writeOffset = startof(CR2WFile[CR2WIdx].CR2WImport.CR2WImport[CR2WFile[CR2WIdx].CR2WTable[2].itemCount-1].path)
            + sizeof(CR2WFile[CR2WIdx].CR2WImport.CR2WImport[CR2WFile[CR2WIdx].CR2WTable[2].itemCount-1].path);
        CR2WFile[CR2WIdx].CR2WTable[2].offset += sizeof(newFile);
    } else {
        uint writeOffset = startof(CR2WFile[CR2WIdx].STRINGS) + sizeof(CR2WFile[CR2WIdx].STRINGS); //+ 16 && cpos >= startof(CR2WFile[CR2WIdx].CR2WProperty);
        CR2WFile[CR2WIdx].CR2WTable[2].offset = sizeof(newFile) + startof(CR2WFile[CR2WIdx].CR2WProperty);
    }
    CR2WFile[CR2WIdx].CR2WTable[0].itemCount += sizeof(newFile);
    CR2WFile[CR2WIdx].CR2WTable[1].offset += sizeof(newFile);
    CR2WFile[CR2WIdx].CR2WTable[3].offset += addedSize;
    CR2WFile[CR2WIdx].CR2WTable[4].offset += addedSize;
    for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[4].itemCount; i++) 
        CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataOffset += addedSize;
    if (CR2WFile[CR2WIdx].CR2WTable[5].offset) {
        CR2WFile[CR2WIdx].CR2WTable[5].offset += addedSize;
        for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[5].itemCount; i++)
            CR2WFile[CR2WIdx].CR2WBuffer[i].offset += addedSize;
    }
    CR2WFile[CR2WIdx].HEADER.fileSize += addedSize;
    CR2WFile[CR2WIdx].HEADER.bufferSize += addedSize;
    FSeek(startof(CR2WFile[CR2WIdx].CR2WProperty));
    InsertBytes(FTell(), 8, 0);
    WriteUInt(FTell(), writeOffset - startof(CR2WFile[CR2WIdx].STRINGS));
    InsertBytes(writeOffset, sizeof(newFile), 0);
    WriteString(writeOffset, newFile);
    CR2WFile[CR2WIdx].CR2WTable[2].itemCount++;
    SPrintf(s, "Inserted new CR2WImport at position %u\n", FTell()); output += s;
    SPrintf(s, "Inserted new filepath string at position %u\n", writeOffset); output += s;
}

void InsertNewCR2WExport() {   
    uint newClassOffset = 24 + startof(CR2WFile[CR2WIdx])
        + CR2WFile[CR2WIdx].CR2WExport.CR2WExport[CR2WFile[CR2WIdx].CR2WTable[4].itemCount-1].dataOffset 
        + CR2WFile[CR2WIdx].CR2WExport.CR2WExport[CR2WFile[CR2WIdx].CR2WTable[4].itemCount-1].dataSize;
    
    for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[4].itemCount; i++)
        CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataOffset += 24;
    if (CR2WFile[CR2WIdx].CR2WTable[5].offset) {
        CR2WFile[CR2WIdx].CR2WTable[5].offset += 24;
        for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[5].itemCount; i++)
            CR2WFile[CR2WIdx].CR2WBuffer[i].offset += 27;
    }
    CR2WFile[CR2WIdx].HEADER.fileSize += 27;
    CR2WFile[CR2WIdx].HEADER.bufferSize += 27;
    FSeek(startof(CR2WFile[CR2WIdx].CR2WExport) + sizeof(CR2WFile[CR2WIdx].CR2WExport));
    InsertBytes(FTell(), 24, 0);
    WriteUShort(FTell(), CR2WFile[CR2WIdx].CR2WTable[1].itemCount-1); //class name
    WriteUInt(FTell()+8, 3); //size
    WriteUInt(FTell()+12, newClassOffset - startof(CR2WFile[CR2WIdx])); //class offset
    InsertBytes(newClassOffset, 3, 0);
    CR2WFile[CR2WIdx].CR2WTable[4].itemCount += 1;
    SPrintf(s, "Inserted new CR2WExport at position %u\n", FTell()); output += s;
    SPrintf(s, "Inserted new Class at position %u\n", newClassOffset); output += s;
} 

void InsertNewCR2WBuffer() {
    uint newBufferOffset = FileSize()+24;
    for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[4].itemCount; i++)
        CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataOffset += 24;
    if (CR2WFile[CR2WIdx].CR2WTable[5].itemCount) {
        for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[5].itemCount; i++)
            CR2WFile[CR2WIdx].CR2WBuffer[i].offset += 24;
    } else CR2WFile[CR2WIdx].CR2WTable[5].offset = startof(CR2WFile[CR2WIdx].CR2WExport) + sizeof(CR2WFile[CR2WIdx].CR2WExport) - startof(CR2WFile[CR2WIdx]);
    FSeek(startof(CR2WFile[CR2WIdx]) + CR2WFile[CR2WIdx].CR2WTable[5].offset + 24 * CR2WFile[CR2WIdx].CR2WTable[5].itemCount);
    InsertBytes(FTell(), 24, 0);
    WriteUInt(FTell(), 917504); //flags
    WriteUInt(FTell()+8, newBufferOffset - startof(CR2WFile[CR2WIdx])); //offset
    WriteUInt(FTell()+12, 0); //diskSize6
    WriteUInt(FTell()+16, 0); //memSize
    //InsertBytes(newBufferOffset, 4, 0);
    //WriteUInt(newBufferOffset, 1263681867); //KARK
    CR2WFile[CR2WIdx].HEADER.fileSize += 24;
    CR2WFile[CR2WIdx].HEADER.bufferSize += 24;
    CR2WFile[CR2WIdx].CR2WTable[5].itemCount += 1;
    SPrintf(s, "Inserted new CR2WBuffer at position %u\n", FTell()); output += s;
}

void InsertNewProperty() {
    uint ExportIdx = -1; 
    uint dataSz = 0;
    
    for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[4].itemCount; i++) {
        dataSz = CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataSize;
        if (startof(CR2WFile[CR2WIdx]) + CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataOffset + dataSz > cpos) {
            if (exists(CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i+1]) && CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i+1].dataOffset == CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataOffset) {
                SPrintf(s, "%u", i);
                ExportIdx = InputNumber("Multiple Classes", "Which Class number are you adding to?", s);
            } else 
                ExportIdx = i;
            break;
        }
    }
    uint classStart = startof(CR2WFile[CR2WIdx]) + CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataOffset;

    if (ExportIdx < 0 || cpos < startof(CR2WFile[CR2WIdx].DATA)+1 ) {
        Printf("Select a valid class, property, CR2WExport, CR2WImport, CR2WBuffer, CR2WProperty or CName\n");
        Printf(output);
        return 0;
    }
    
    if (CR2WFile[CR2WIdx].CR2WExport.CR2WExport[ExportIdx].dataSize == 0)
        InsertBytes(cpos, 1, 0); 
    SetSelection(cpos, 0);
    PasteFromClipboard(); 
    //addedSize = GetSelSize();

    if (cpos == classStart) {
        InsertBytes(cpos, 1, 0);
        DeleteBytes(cpos + addedSize, 1);
        cpos += 1;
    }
    SPrintf(s, "Inserted %u bytes into Class[%i] of CR2WFile[%u] at position %u\n", addedSize, ExportIdx, CR2WIdx, cpos); output += s;
    
    for (a=0; a<CR2WFile[CR2WIdx].CR2WTable[4].itemCount; a++){
        f = 0;
        while (exists(CR2WFile[CR2WIdx].DATA.Class[a].Property[f])) {
            if (findProp(CR2WFile[CR2WIdx].DATA.Class[a].Property[f]) == 1) 
                break;
            f++;
        }
    }
    
    //exports
    CR2WFile[CR2WIdx].CR2WExport.CR2WExport[ExportIdx].dataSize += addedSize;
    for (i=ExportIdx+1; i<CR2WFile[CR2WIdx].CR2WTable[4].itemCount; i++) 
        CR2WFile[CR2WIdx].CR2WExport.CR2WExport[i].dataOffset += addedSize;
    for (i=0; i<CR2WFile[CR2WIdx].CR2WTable[5].itemCount; i++) 
        CR2WFile[CR2WIdx].CR2WBuffer[i].offset += addedSize;
    CR2WFile[CR2WIdx].HEADER.fileSize += addedSize;
    CR2WFile[CR2WIdx].HEADER.bufferSize += addedSize;
}

//General offset fixer
void FixOffsets(uint64 tell, uint64 limitPoint, uint64 insertPoint, uint64 addedSz, int doInt32) {
    if (tell > limitPoint)
        return;
    local uint64 pos = FTell();
    local int64 tmp;
    local int varSize = 8 + -4 * doInt32;
    FSeek(tell);
    while(FTell() + varSize <= limitPoint) {
        if (FTell()+varSize > FileSize()) 
            break;
        if (doInt32==1)
            tmp = ReadInt(FTell());
        else 
            tmp = ReadInt64(FTell());
        
        if (tmp >= insertPoint && tmp < FileSize()) {
            //Printf("%i  >? %i @ position %i (limit %i) added +%i\n", tmp, insertPoint, FTell(), limitPoint, addedSz);
            if (doInt32==1) 
                tmp = WriteUInt(FTell(), tmp+addedSz);
            else WriteUInt64(FTell(), tmp + addedSz);
        }
        FSkip(varSize);
    }
}


//start of script========================================================================================
uint CR2WIdx, I; 
byte nested = -1;
uint oldFileSize = FileSize();
while(exists(CR2WFile[I])) {
    if (cpos >= startof(CR2WFile[I]) && cpos < startof(CR2WFile[I]) + sizeof(CR2WFile[I])) {
        Printf("cpos: %i i: %i s: %i e: %i\n", cpos, I, startof(CR2WFile[I]), startof(CR2WFile[I]) + sizeof(CR2WFile[I]));
        CR2WIdx = I;
        nested++;
    }
    I++;
}

local ubyte doCName = false;
local ubyte doCR2WImport = false;
local ubyte doCR2WExport = false;
local ubyte doProperty = false;
local ubyte doCR2WBuffer = false;

//insert new CName
if (cpos < startof(CR2WFile[CR2WIdx].NAMES) + sizeof(CR2WFile[CR2WIdx].NAMES) && cpos >= startof(CR2WFile[CR2WIdx].NAMES)) 
{
    doCName = true;
    CNAME newCName = InputString("Insert Enum", "What string do you want to insert?", "");
    if (newCName == "") return false;
    addedSize = 8 + sizeof(newCName);
} 
//insert new CR2WImport
else if ((exists(CR2WFile[CR2WIdx].CR2WImport) && (cpos < startof(CR2WFile[CR2WIdx].CR2WImport) + sizeof(CR2WFile[CR2WIdx].CR2WImport) && cpos >= startof(CR2WFile[CR2WIdx].CR2WImport)))
    || (cpos < startof(CR2WFile[CR2WIdx].CR2WProperty) + 16 && cpos >= startof(CR2WFile[CR2WIdx].CR2WProperty)))
{
    doCR2WImport = true;
    CNAME newFile = InputString("Insert CR2WImport", "What filepath do you want to insert?", "");
    addedSize = 8 + sizeof(newFile);
} 
//insert new CR2WExport
else if (cpos > startof(CR2WFile[CR2WIdx].CR2WExport) && cpos < startof(CR2WFile[CR2WIdx]) + CR2WFile[CR2WIdx].CR2WTable[4].offset + CR2WFile[CR2WIdx].CR2WTable[4].itemCount * 24)
{   
    doCR2WExport = true;
} //insert new CR2WBuffer
else if ((exists(CR2WFile[CR2WIdx].CR2WBuffer) && cpos > startof(CR2WFile[CR2WIdx].CR2WBuffer) && cpos < startof(CR2WFile[CR2WIdx]) + CR2WFile[CR2WIdx].CR2WTable[5].offset + CR2WFile[CR2WIdx].CR2WTable[5].itemCount * 24)
    || cpos == startof(CR2WFile[CR2WIdx].CR2WTables))
{
    doCR2WBuffer = true;
} //insert new property
else if (cpos > startof(CR2WFile[CR2WIdx].DATA) && cpos < startof(CR2WFile[CR2WIdx].DATA) + sizeof(CR2WFile[CR2WIdx].DATA)) 
{
    doProperty = true;
    SetSelection(cpos, 0);
    PasteFromClipboard();
    addedSize = GetSelSize();
    DeleteBytes(cpos, addedSize);
    SetCursorPos(cpos);
} else {
    SPrintf(s, "Select a valid class, property, CR2WExport, CR2WImport, CR2WProperty, CR2WBuffer or CName\n"); output += s;
    Printf(output);
    return false;
}

if (nested > 0) {
    local int kk;
    I=0;
    while(exists(CR2WFile[I])) {
        if (cpos >= startof(CR2WFile[I]) && cpos < startof(CR2WFile[I]) + sizeof(CR2WFile[I])) {
            
            if (startof(CR2WFile[I]) > 0 && CR2WFile[CR2WIdx].HEADER.fileSize == ReadUInt(startof(CR2WFile[I])-4)) { //SharedDataBuffer
                WriteUInt(startof(CR2WFile[I])-4, CR2WFile[CR2WIdx].HEADER.fileSize+addedSize); //BufferSize
                WriteUInt(startof(CR2WFile[I])-8, CR2WFile[CR2WIdx].HEADER.fileSize+addedSize+8); //Size
            }
            FixOffsets(startof(CR2WFile[I])+20, startof(CR2WFile[I].NAMES),  cpos - startof(CR2WFile[I]), FileSize() - oldFileSize, true);
            if (exists(CR2WFile[I].NAMES))
                FixOffsets(startof(CR2WFile[I].NAMES), startof(CR2WFile[I].NAMES)+sizeof(CR2WFile[I].NAMES),  cpos - startof(CR2WFile[I]), FileSize() - oldFileSize, true);
            if (exists(CR2WFile[I].FILES))
                FixOffsets(startof(CR2WFile[I].FILES), startof(CR2WFile[I].FILES)+sizeof(CR2WFile[I].FILES),  cpos - startof(CR2WFile[I]), FileSize() - oldFileSize, true);
            if (exists(CR2WFile[I].CR2WExport))
                FixOffsets(startof(CR2WFile[I].CR2WExport), startof(CR2WFile[I].CR2WExport)+sizeof(CR2WFile[I].CR2WExport),  cpos - startof(CR2WFile[I]), FileSize() - oldFileSize, true);
            kk=0;
            while (exists(CR2WFile[I].CR2WBuffer[kk])) {
                if (CR2WFile[I].CR2WBuffer[kk].offset > cpos - startof(CR2WFile[I])) 
                    CR2WFile[I].CR2WBuffer[kk].offset += (FileSize() - oldFileSize);
                kk++;
            }
        }
        I++;
    }
}

if (doCName)
    InsertNewCName();
else if (doCR2WImport)
    InsertNewCR2WImport();
else if (doCR2WExport)
    InsertNewCR2WExport();
else if (doCR2WBuffer)
    InsertNewCR2WBuffer();
else if (doProperty)
    InsertNewProperty();

if (Run_Template_After_Completion)
    RunTemplate("", true);
Printf(output);
if (!Run_Template_After_Completion && addedSize != 0)
    Printf("Press F5 to refresh the template and fix template results\n");
WriteByte(7,0); //allows script-undo